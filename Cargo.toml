[package]
name = "log4rs"
version = "0.7.0"
authors = ["Steven Fackler <sfackler@gmail.com>"]
description = "A highly configurable multi-output logging implementation for the `log` facade"
license = "MIT/Apache-2.0"
repository = "https://github.com/sfackler/log4rs"
documentation = "https://docs.rs/log4rs/0.7.0"
readme = "README.md"
keywords = ["logger", "log", "logging"]

[features]
default = ["all_components", "gzip", "file", "yaml_format"]

file = ["humantime", "serde", "serde_derive", "serde-value", "typemap"]
yaml_format = ["serde_yaml"]
json_format = ["serde_json"]
toml_format = ["toml"]

console_appender = ["console_writer", "simple_writer", "pattern_encoder"]
file_appender = ["antidote", "simple_writer", "pattern_encoder"]
rolling_file_appender = ["antidote", "simple_writer", "pattern_encoder"]
compound_policy = []
delete_roller = []
fixed_window_roller = []
size_trigger = []
json_encoder = ["serde", "serde_json", "chrono", "log-mdc", "serde_derive"]
pattern_encoder = ["chrono", "log-mdc", "libc", "kernel32-sys"]
ansi_writer = []
console_writer = ["ansi_writer", "libc", "kernel32-sys", "winapi"]
simple_writer = []
threshold_filter = []

all_components = [
    "console_appender",
    "file_appender",
    "rolling_file_appender",
    "compound_policy",
    "delete_roller",
    "fixed_window_roller",
    "size_trigger",
    "json_encoder",
    "pattern_encoder",
    "threshold_filter"
]

gzip = ["flate2"]

[dependencies]
antidote = { version = "1.0", optional = true }
chrono = { version = "0.4", optional = true }
crossbeam = "0.2.9"
flate2 = { version = "0.2", optional = true }
fnv = "1.0"
humantime = { version = "1.0", optional = true }
log = "0.3"
log-mdc = { version = "0.1", optional = true }
serde = { version = "1.0", optional = true }
serde_derive = { version = "1.0", optional = true }
serde-value = { version = "0.5", optional = true }
typemap = { version = "0.3", optional = true }
serde_json = { version = "1.0", optional = true }
serde_yaml = { version = "0.7", optional = true }
toml = { version = "0.4", optional = true }

[target.'cfg(windows)'.dependencies]
kernel32-sys = { version = "0.2", optional = true }
winapi = { version = "0.2", optional = true }

[target.'cfg(not(windows))'.dependencies]
libc = { version = "0.2", optional = true }

[dev-dependencies]
tempdir = "0.3"
